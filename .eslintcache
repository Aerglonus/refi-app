[{"/Users/thanhle/CuThanh/refi-client/src/index.tsx":"1","/Users/thanhle/CuThanh/refi-client/src/serviceWorker.ts":"2","/Users/thanhle/CuThanh/refi-client/src/App.tsx":"3","/Users/thanhle/CuThanh/refi-client/src/pages/main/index.tsx":"4","/Users/thanhle/CuThanh/refi-client/src/pages/main/main.tsx":"5","/Users/thanhle/CuThanh/refi-client/src/components/TreeView/index.tsx":"6","/Users/thanhle/CuThanh/refi-client/src/components/PathInput/index.tsx":"7","/Users/thanhle/CuThanh/refi-client/src/components/DataTable/index.tsx":"8","/Users/thanhle/CuThanh/refi-client/src/components/FieldViewer/index.tsx":"9","/Users/thanhle/CuThanh/refi-client/src/components/DataTable/scroll-bar-width.js":"10","/Users/thanhle/CuThanh/refi-client/src/atoms/navigator.ts":"11","/Users/thanhle/CuThanh/refi-client/src/utils/common.ts":"12","/Users/thanhle/CuThanh/refi-client/src/components/Modal/index.tsx":"13","/Users/thanhle/CuThanh/refi-client/src/components/DocForm/index.tsx":"14","/Users/thanhle/CuThanh/refi-client/src/components/FieldForm/index.tsx":"15"},{"size":783,"mtime":1610265823471,"results":"16","hashOfConfig":"17"},{"size":5278,"mtime":1609985780195,"results":"18","hashOfConfig":"17"},{"size":737,"mtime":1610352653090,"results":"19","hashOfConfig":"17"},{"size":1060,"mtime":1610352590619,"results":"20","hashOfConfig":"17"},{"size":435,"mtime":1610269292121,"results":"21","hashOfConfig":"17"},{"size":2728,"mtime":1610267712427,"results":"22","hashOfConfig":"17"},{"size":969,"mtime":1610328589015,"results":"23","hashOfConfig":"17"},{"size":3946,"mtime":1610268949120,"results":"24","hashOfConfig":"17"},{"size":1926,"mtime":1610260696587,"results":"25","hashOfConfig":"17"},{"size":486,"mtime":1610206605714,"results":"26","hashOfConfig":"17"},{"size":168,"mtime":1610267662186,"results":"27","hashOfConfig":"17"},{"size":125,"mtime":1610269031367,"results":"28","hashOfConfig":"17"},{"size":1883,"mtime":1610354691872,"results":"29","hashOfConfig":"17"},{"size":3012,"mtime":1610419479433,"results":"30","hashOfConfig":"17"},{"size":11400,"mtime":1610418936154,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"3vb84o",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"/Users/thanhle/CuThanh/refi-client/src/index.tsx",[],["69","70"],"/Users/thanhle/CuThanh/refi-client/src/serviceWorker.ts",[],"/Users/thanhle/CuThanh/refi-client/src/App.tsx",[],"/Users/thanhle/CuThanh/refi-client/src/pages/main/index.tsx",[],"/Users/thanhle/CuThanh/refi-client/src/pages/main/main.tsx",["71"],"import React from \"react\";\nimport DataTable from \"@/components/DataTable\";\nimport { navigatorPath } from \"@/atoms/navigator\";\nimport { useRecoilState } from \"recoil\";\n\nfunction Main() {\n  const [path, setPath] = useRecoilState(navigatorPath);\n\n  return (\n    <div className=\"h-full p-2 border border-gray-300 rounded shadow-sm main \">\n      <div>Filter here</div>\n      <DataTable key={path} />\n    </div>\n  );\n}\n\nexport default Main;\n","/Users/thanhle/CuThanh/refi-client/src/components/TreeView/index.tsx",["72"],"import { useEffect, useRef, useState } from \"react\";\nimport * as immutable from \"object-path-immutable\";\nimport Tree from \"rc-tree\";\nimport \"rc-tree/assets/index.css\";\nimport { useRecoilState, useResetRecoilState } from \"recoil\";\nimport { navigatorPath } from \"@/atoms/navigator\";\n\ninterface TreeNode {\n  key: string;\n  title: string;\n  children: TreeNode[];\n  isCollection: boolean;\n}\n\nfunction buildTree(\n  mapObj: Record<string, any>,\n  result: TreeNode[],\n  parent: string = \"\",\n  isCollection: boolean = true\n): TreeNode[] {\n  result = Object.keys(mapObj).map((key) => ({\n    key: [parent, key].join(\"/\"),\n    title: key,\n    children: [],\n    isCollection: isCollection,\n  }));\n\n  Object.keys(mapObj).forEach((key) => {\n    const parent = result.find((node: TreeNode) => node.title === key);\n    if (parent) {\n      parent.children = buildTree(mapObj[key], [], parent.key, !isCollection);\n    }\n  });\n\n  return result;\n}\n\nfunction TreeView() {\n  const [path, setPath] = useRecoilState(navigatorPath);\n  const [data, setData] = useState<TreeNode[]>([]);\n  const structTree = useRef({});\n\n  const constructData = (data: any[]) => {\n    const newObject = immutable.wrap(structTree.current);\n\n    data.forEach((doc: any) => {\n      newObject.merge(doc?.ref?.path.replaceAll(\"/\", \".\"), {});\n    });\n\n    structTree.current = newObject.value();\n    setData(buildTree(structTree.current, []));\n  };\n\n  useEffect(() => {\n    const collections = path\n      .split(\"/\")\n      .reduce((prev: string[], current: string) => {\n        const lastPath = prev[prev.length - 1];\n        return [...prev, [lastPath, current].join(\"/\").replace(\"//\", \"/\")];\n      }, [])\n      .filter((collection, index) => index % 2);\n    const listeners = collections.map((collection) => {\n      return window.listen(collection, (data: any[]) => constructData(data));\n    });\n\n    const ids = Promise.all(\n      collections.map((collection) => {\n        return window\n          .send(\"fs.pathExplorer.subscribe\", {\n            topic: collection,\n            path: collection,\n          })\n          .then((response) => {\n            return response.id;\n          }) as Promise<string>;\n      })\n    );\n\n    console.log(ids);\n\n    return () => {\n      listeners.forEach((listener) => listener());\n      // Promise.all(\n      //   ids.map((id: string) =>\n      //     window.send(\"fs.unsubscribe\", {\n      //       id,\n      //     })\n      //   )\n      // );\n    };\n  }, [path]);\n\n  const handleSelectTree = (keys: React.ReactText[]) => {\n    if (keys.length > 0) {\n      setPath(keys[0] as string);\n    }\n  };\n\n  return (\n    <div>\n      <Tree showLine treeData={data} onSelect={handleSelectTree} height={500} />\n    </div>\n  );\n}\n\nexport default TreeView;\n","/Users/thanhle/CuThanh/refi-client/src/components/PathInput/index.tsx",[],"/Users/thanhle/CuThanh/refi-client/src/components/DataTable/index.tsx",["73"],"import React, { useEffect, useState } from \"react\";\nimport { useTable, useBlockLayout } from \"react-table\";\nimport { FixedSizeList } from \"react-window\";\nimport scrollbarWidth from \"./scroll-bar-width\";\nimport FieldViewer from \"@/components/FieldViewer\";\nimport { navigatorPath } from \"@/atoms/navigator\";\nimport { useRecoilState } from \"recoil\";\nimport { isCollection } from \"@/utils/common\";\n\ninterface IUser extends Record<string, any> {\n  username: string;\n  gender: string;\n}\n\nfunction Table({ columns, data }: { columns: any[]; data: any[] }) {\n  // Use the state and functions returned from useTable to build your UI\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      width: 150,\n    }),\n    []\n  );\n\n  const scrollBarSize = React.useMemo(() => scrollbarWidth(), []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n    },\n    useBlockLayout\n  );\n\n  const RenderRow = React.useCallback(\n    ({ index, style }) => {\n      const row = rows[index];\n      prepareRow(row);\n      return (\n        <div\n          {...row.getRowProps({\n            style,\n          })}\n          className=\"tr\"\n        >\n          {row.cells.map((cell: any) => {\n            return (\n              <div {...cell.getCellProps()} className=\"td\">\n                {cell.render(\"Cell\")}\n              </div>\n            );\n          })}\n        </div>\n      );\n    },\n    [prepareRow, rows]\n  );\n\n  // Render the UI for your table\n  return (\n    <div {...getTableProps()} className=\"table\">\n      <div>\n        {headerGroups.map((headerGroup: any) => (\n          <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\n            {headerGroup.headers.map((column: any) => (\n              <div {...column.getHeaderProps()} className=\"th\">\n                {column.render(\"Header\")}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n\n      <div {...getTableBodyProps()}>\n        <FixedSizeList\n          height={400}\n          itemCount={rows.length}\n          itemSize={35}\n          width={totalColumnsWidth + scrollBarSize}\n        >\n          {RenderRow}\n        </FixedSizeList>\n      </div>\n    </div>\n  );\n}\n\nfunction DataTable() {\n  const [data, setData] = useState<IUser[]>([]);\n  const [path, setPath] = useRecoilState(navigatorPath);\n\n  const columns = React.useMemo(() => {\n    if (data?.length > 0) {\n      // TODO: Sort column by alphabet like firebase\n      return Object.keys(data[0])\n        .filter((key) => key !== \"__METADATA\")\n        .sort((a, b) => a.localeCompare(b))\n        .map((key) => ({\n          Header: key,\n          accessor: key,\n          Cell: ({\n            row,\n            value,\n            column,\n          }: {\n            row: any;\n            value: any;\n            column: any;\n          }) => {\n            return (\n              <FieldViewer\n                value={value}\n                type={row?.original?.__METADATA?.type?.[column.id] || \"Object\"}\n              />\n            );\n          },\n        }));\n    }\n\n    return [];\n  }, [data]);\n\n  useEffect(() => {\n    const topicKey = `${path}.table`;\n    const isCollectionType = isCollection(path);\n    const listener = window.listen(topicKey, (data: any) => {\n      if (isCollectionType) {\n        setData(data as IUser[]);\n      } else {\n        console.log(data);\n      }\n    });\n    const handler = isCollectionType\n      ? \"fs.queryCollection.subscribe\"\n      : \"fs.queryDoc.subscribe\";\n    const id = window\n      .send(handler, {\n        topic: topicKey,\n        path,\n      })\n      .then((a) => console.log(a));\n\n    console.log({\n      topic: topicKey,\n      path,\n    });\n\n    return () => {\n      listener();\n      window.send(\"fs.unsubscribe\", {\n        id,\n      });\n    };\n  }, [path]);\n\n  return <Table columns={columns} data={data} />;\n}\n\nexport default DataTable;\n","/Users/thanhle/CuThanh/refi-client/src/components/FieldViewer/index.tsx",["74","75","76"],"import React, { useEffect, useState } from \"react\";\n\nfunction getFieldType(value: any): string {\n  const fieldType = typeof value;\n  switch (fieldType) {\n    case \"string\":\n    case \"number\":\n    case \"boolean\":\n      return fieldType;\n    case \"object\":\n      if (value?._latitude && value?._longitude) {\n        return \"geopoint\";\n      }\n\n      if (value === null) {\n        return \"null\";\n      }\n\n      if (Array.isArray(value)) {\n        return \"array\";\n      }\n\n      // Ref case\n\n      return \"map\";\n  }\n\n  return \"object\";\n}\n\nconst fieldValueMapper: Record<string, Function> = {\n  String: ({ value }: { value: string }) => <div>{value}</div>,\n  Number: ({ value }: { value: number }) => <div>No: {value}</div>,\n  Boolean: ({ value }: { value: boolean }) => <div>Value: {String(value)}</div>,\n  Map: ({ value }: { value: any }) => <div>{JSON.stringify(value)}</div>,\n  Geopoint: ({ value }: { value: any }) => (\n    <div>Geopoint {JSON.stringify(value)}</div>\n  ),\n  Array: ({ value }: { value: any[] }) => (\n    <div>Array {JSON.stringify(value)}</div>\n  ),\n  Timestamp: ({\n    value: { _seconds, _nanoseconds },\n  }: {\n    value: { _seconds: number; _nanoseconds: number };\n  }) => (\n    <div>Time {new Date(_seconds * 1000 + _nanoseconds).toISOString()}</div>\n  ),\n};\n\n// TODO: Implement highlight when update here\nfunction FieldViewer({ value, type = \"Map\" }: { value: any; type?: string }) {\n  const [isUpdated, setUpdated] = useState(false);\n\n  // useEffect(() => {\n  //   setUpdated(true);\n  //   // console.log(\"updated\", value);\n  //   setTimeout(() => {\n  //     setUpdated(false);\n  //   }, 5000);\n  // }, [value, type]);\n\n  if (typeof value === \"undefined\") {\n    return null;\n  }\n\n  const FieldComp = fieldValueMapper[type] || fieldValueMapper[\"Map\"];\n  return (\n    <div className={isUpdated ? \"updated\" : \"\"}>\n      <FieldComp value={value} />\n    </div>\n  );\n}\n\nexport default React.memo(FieldViewer);\n","/Users/thanhle/CuThanh/refi-client/src/components/DataTable/scroll-bar-width.js",[],["77","78"],"/Users/thanhle/CuThanh/refi-client/src/atoms/navigator.ts",[],"/Users/thanhle/CuThanh/refi-client/src/utils/common.ts",[],"/Users/thanhle/CuThanh/refi-client/src/components/Modal/index.tsx",[],"/Users/thanhle/CuThanh/refi-client/src/components/DocForm/index.tsx",["79","80","81","82","83","84","85","86"],"/Users/thanhle/CuThanh/refi-client/src/components/FieldForm/index.tsx",["87","88","89","90","91","92","93"],"import { useEffect, useMemo, useState } from \"react\";\nimport {\n  useFormContext,\n  Controller,\n  useFieldArray,\n  useWatch,\n} from \"react-hook-form\";\nimport { Switch } from \"@headlessui/react\";\nimport { usePrevious } from \"react-use\";\nimport dayjs from \"dayjs\";\n\nconst fieldTypes: Record<string, any> = {\n  string: \"\",\n  number: 0,\n  boolean: false,\n  map: {},\n  array: [],\n  null: null,\n  timestamp: new Date(),\n  geopoint: {\n    _latitude: 0,\n    _longitude: 0,\n  },\n};\n\nconst isNumberable = (value: any) => !Boolean(Number.isNaN(Number(value)));\n\nconst fieldConverter: Record<string, Function> = {\n  string: (toType: string, value: string) => {\n    switch (toType) {\n      case \"number\":\n        return isNumberable(value) ? Number(value) : 0;\n      case \"boolean\":\n        return Boolean([\"yes\", \"true\"].includes(value?.toLowerCase()));\n\n      case \"map\":\n        try {\n          return JSON.parse(value);\n        } catch (error) {\n          return {};\n        }\n\n      case \"timestamp\":\n        // Try to parse\n        try {\n          return dayjs(value).toDate();\n        } catch (error) {\n          console.log(error);\n          return new Date();\n        }\n      case \"geopoint\":\n        try {\n          const [lat, long] = value?.split(\",\");\n\n          if (lat && isNumberable(lat) && long && isNumberable(long)) {\n            return {\n              _latitude: Number(lat),\n              _longitude: Number(long),\n            };\n          }\n\n          return {\n            _latitude: 0,\n            _longitude: 0,\n          };\n        } catch (error) {\n          console.log(error);\n          return {\n            _latitude: 0,\n            _longitude: 0,\n          };\n        }\n\n      default:\n        return null;\n    }\n  },\n  number: (toType: string, value: number) => {\n    switch (toType) {\n      case \"string\":\n        return String(value);\n      case \"boolean\":\n        return Boolean(value === 1);\n\n      default:\n        return 0;\n    }\n  },\n  boolean: (toType: string, value: boolean) => {\n    switch (toType) {\n      case \"string\":\n        return value ? \"true\" : \"false\";\n      case \"number\":\n        return value ? 1 : 0;\n      default:\n        return null;\n    }\n  },\n  map: (toType: string, value: Record<string, any>) => {\n    switch (toType) {\n      case \"string\":\n        return JSON.stringify(value);\n      case \"geopoint\":\n        if (isNumberable(value?._latitude) && isNumberable(value?._longitude)) {\n          return {\n            _latitude: value?._latitude,\n            _longitude: value?._longitude,\n          };\n        }\n\n        return null;\n      default:\n        return null;\n    }\n  },\n  array: (toType: string, value: Record<string, any>) => {\n    switch (toType) {\n      case \"string\":\n        return JSON.stringify(value);\n      case \"map\":\n        // TODO: Map array to object\n        return [];\n      case \"geopoint\":\n        // TODO:\n        return {\n          _latitude: 0,\n          _longitude: 0,\n        };\n    }\n  },\n  null: () => {\n    return null;\n  },\n  timestamp: (toType: string, value: string) => {\n    switch (toType) {\n      case \"string\":\n        return value;\n      case \"number\":\n        return Number(dayjs(value).toDate());\n      default:\n        return null;\n    }\n  },\n  geopoint: (\n    toType: string,\n    { _latitude, _longitude }: { _latitude: number; _longitude: number }\n  ) => {\n    switch (toType) {\n      case \"string\":\n        return [_latitude, _longitude].join(\",\");\n      case \"map\":\n        return {\n          _latitude,\n          _longitude,\n        };\n      default:\n        return null;\n    }\n  },\n};\n\nconst GeopointInputComp = ({ fieldValuePath }: { fieldValuePath: string }) => {\n  const { register } = useFormContext();\n\n  return (\n    <div className=\"flex flex-col pl-4\">\n      <input\n        type=\"number\"\n        min={-90}\n        max={90}\n        defaultValue={0}\n        name={`${fieldValuePath}._latitude`}\n        className=\"input-field\"\n        placeholder=\"0.00\"\n        ref={register}\n      />\n      <input\n        type=\"number\"\n        min={-90}\n        max={90}\n        defaultValue={0}\n        name={`${fieldValuePath}._longitude`}\n        className=\"mt-2 input-field\"\n        placeholder=\"0.00\"\n        ref={register}\n      />\n      <div>Pick location from map</div>\n    </div>\n  );\n};\n\nconst MapInputComp = ({ fieldValuePath }: { fieldValuePath: string }) => {\n  const { control } = useFormContext();\n  const { fields, append, prepend, remove, swap, move, insert } = useFieldArray(\n    {\n      control,\n      name: fieldValuePath,\n    }\n  );\n\n  useEffect(() => {\n    append({ fieldName: \"appendBill\", lastName: \"fieldValue\" });\n  }, []);\n\n  return (\n    <div className=\"pl-4 mt-4 border-l-2 border-gray-200\">\n      {fields.map((field, index) => (\n        <div key={field.id} className=\"flex flex-row items-start mb-4\">\n          <div className=\"mr-2\">\n            <FieldForm\n              fieldNamePath={`${fieldValuePath}[${index}].fieldName`}\n              fieldValuePath={`${fieldValuePath}[${index}].fieldValue`}\n              fieldTypePath={`${fieldValuePath}[${index}].fieldType`}\n            />\n          </div>\n          <div>\n            <button\n              type=\"button\"\n              className=\"pt-2\"\n              tabIndex={-1}\n              onClick={() => remove(index)}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                className=\"w-6 h-6 text-red-500 fill-current hover:text-red-600\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2h6a1 1 0 100-2H7z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      ))}\n      <div>\n        <button\n          type=\"button\"\n          className=\"flex items-center secondary-btn\"\n          onClick={() =>\n            append({ fieldName: \"appendBill\", lastName: \"fieldValue\" })\n          }\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n            className=\"w-6 h-6 mr-1 fill-current text-grey hover:text-grey-darkest\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>{\" \"}\n          Add field\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst FieldValueInput = ({\n  type,\n  onChange,\n  value,\n  fieldValuePath,\n}: {\n  type: string;\n  onChange: Function;\n  value: any;\n  fieldValuePath: string;\n}) => {\n  switch (type) {\n    case \"string\":\n      return (\n        <input\n          type=\"text\"\n          className=\"input-field\"\n          placeholder=\"Field value\"\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n        />\n      );\n    case \"number\":\n      return (\n        <input\n          type=\"number\"\n          className=\"input-field\"\n          placeholder=\"Field value\"\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n        />\n      );\n\n    case \"boolean\":\n      return (\n        <Switch.Group as=\"div\" className=\"flex items-center pt-2 space-x-4\">\n          <Switch\n            as=\"button\"\n            checked={value}\n            onChange={(checked) => onChange(checked)}\n            className={`${\n              value ? \"bg-indigo-600\" : \"bg-gray-200\"\n            } relative inline-flex flex-shrink-0 h-6 transition-colors duration-100 ease-in-out border-2 border-transparent rounded-full cursor-pointer w-11 focus:outline-none focus:shadow-outline`}\n          >\n            {({ checked }) => (\n              <span\n                className={`${\n                  checked ? \"translate-x-5\" : \"translate-x-0\"\n                } inline-block w-5 h-5 transition duration-100 ease-in-out transform bg-white rounded-full`}\n              />\n            )}\n          </Switch>\n        </Switch.Group>\n      );\n\n    case \"geopoint\":\n      return <GeopointInputComp fieldValuePath={fieldValuePath} />;\n\n    case \"array\":\n      return <div>Array</div>;\n\n    case \"null\":\n      return <div>Null</div>;\n\n    case \"timestamp\":\n      return (\n        <input\n          type=\"datetime-local\"\n          className=\"input-field\"\n          placeholder=\"Field value\"\n          value={dayjs(value).format(\"YYYY-MM-DDThh:mm\")}\n          onChange={(e) => onChange(e.target.value)}\n        />\n      );\n\n    case \"map\":\n      return <MapInputComp fieldValuePath={fieldValuePath} />;\n\n    default:\n      return (\n        <input\n          type=\"text\"\n          className=\"input-field\"\n          placeholder=\"Field value\"\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n        />\n      );\n  }\n};\n\nconst FieldForm = ({\n  fieldNamePath,\n  fieldValuePath,\n  fieldTypePath,\n}: {\n  fieldNamePath: string;\n  fieldValuePath: string;\n  fieldTypePath: string;\n}) => {\n  const { register, control, setValue, getValues } = useFormContext();\n  const fieldType = useWatch({\n    control,\n    name: fieldTypePath,\n    defaultValue: \"string\",\n  });\n  const fieldInput = useMemo(() => {\n    return (\n      <Controller\n        name={fieldValuePath}\n        control={control}\n        defaultValue=\"\"\n        render={({ onChange, onBlur, value, name, ref }) => (\n          <FieldValueInput\n            onChange={onChange}\n            value={value}\n            type={fieldType}\n            fieldValuePath={fieldValuePath}\n          />\n        )}\n      ></Controller>\n    );\n  }, [fieldType, fieldValuePath, control]);\n\n  const previousType: string = usePrevious(fieldType) || \"string\";\n\n  useEffect(() => {\n    if (fieldType !== previousType) {\n      const oldValue = getValues(fieldValuePath);\n      console.log(\"difference\", oldValue);\n      const newValue =\n        fieldConverter?.[previousType || \"string\"](fieldType, oldValue) ||\n        fieldTypes[fieldType];\n\n      // TODO: Still bug in convert string to geopoint\n      setValue(fieldValuePath, newValue);\n\n      console.log(oldValue, previousType, newValue);\n    }\n  }, [fieldType]);\n\n  return (\n    <div\n      className={`flex items-start ${\n        [\"map\", \"array\"].includes(fieldType) ? \"flex-col\" : \"flex-row\"\n      }`}\n    >\n      <div className=\"relative flex-1 mr-4\">\n        <input\n          type=\"text\"\n          name={fieldNamePath}\n          className=\"pr-12 input-field w-60\"\n          placeholder=\"Field name\"\n          ref={register}\n        />\n        <div className=\"absolute inset-y-0 right-0 flex items-center\">\n          <label htmlFor=\"fieldType\" className=\"sr-only\">\n            Type\n          </label>\n          <select\n            tabIndex={-1}\n            id=\"fieldType\"\n            name={fieldTypePath}\n            className=\"h-full py-0 pl-2 text-gray-500 bg-transparent border-transparent rounded-md text-select-right pr-7 sm:text-sm\"\n            defaultValue=\"string\"\n            ref={register}\n          >\n            {Object.keys(fieldTypes).map((type) => (\n              <option value={type} key={type}>\n                {type}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      <div className=\"flex-1\">{fieldInput}</div>\n    </div>\n  );\n};\n\nexport default FieldForm;\n",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":7,"column":16,"nodeType":"100","messageId":"101","endLine":7,"endColumn":23},{"ruleId":"98","severity":1,"message":"102","line":5,"column":26,"nodeType":"100","messageId":"101","endLine":5,"endColumn":45},{"ruleId":"98","severity":1,"message":"99","line":98,"column":16,"nodeType":"100","messageId":"101","endLine":98,"endColumn":23},{"ruleId":"98","severity":1,"message":"103","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":26},{"ruleId":"98","severity":1,"message":"104","line":3,"column":10,"nodeType":"100","messageId":"101","endLine":3,"endColumn":22},{"ruleId":"98","severity":1,"message":"105","line":53,"column":21,"nodeType":"100","messageId":"101","endLine":53,"endColumn":31},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"106","line":5,"column":7,"nodeType":"100","messageId":"101","endLine":5,"endColumn":17},{"ruleId":"98","severity":1,"message":"107","line":18,"column":11,"nodeType":"100","messageId":"101","endLine":18,"endColumn":19},{"ruleId":"98","severity":1,"message":"108","line":18,"column":44,"nodeType":"100","messageId":"101","endLine":18,"endColumn":50},{"ruleId":"98","severity":1,"message":"109","line":23,"column":27,"nodeType":"100","messageId":"101","endLine":23,"endColumn":34},{"ruleId":"98","severity":1,"message":"110","line":23,"column":44,"nodeType":"100","messageId":"101","endLine":23,"endColumn":48},{"ruleId":"98","severity":1,"message":"111","line":23,"column":50,"nodeType":"100","messageId":"101","endLine":23,"endColumn":54},{"ruleId":"98","severity":1,"message":"112","line":23,"column":56,"nodeType":"100","messageId":"101","endLine":23,"endColumn":62},{"ruleId":"113","severity":1,"message":"114","line":32,"column":6,"nodeType":"115","endLine":32,"endColumn":8,"suggestions":"116"},{"ruleId":"98","severity":1,"message":"117","line":1,"column":30,"nodeType":"100","messageId":"101","endLine":1,"endColumn":38},{"ruleId":"98","severity":1,"message":"109","line":194,"column":27,"nodeType":"100","messageId":"101","endLine":194,"endColumn":34},{"ruleId":"98","severity":1,"message":"110","line":194,"column":44,"nodeType":"100","messageId":"101","endLine":194,"endColumn":48},{"ruleId":"98","severity":1,"message":"111","line":194,"column":50,"nodeType":"100","messageId":"101","endLine":194,"endColumn":54},{"ruleId":"98","severity":1,"message":"112","line":194,"column":56,"nodeType":"100","messageId":"101","endLine":194,"endColumn":62},{"ruleId":"113","severity":1,"message":"114","line":203,"column":6,"nodeType":"115","endLine":203,"endColumn":8,"suggestions":"118"},{"ruleId":"113","severity":1,"message":"119","line":405,"column":6,"nodeType":"115","endLine":405,"endColumn":17,"suggestions":"120"},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"@typescript-eslint/no-unused-vars","'setPath' is assigned a value but never used.","Identifier","unusedVar","'useResetRecoilState' is defined but never used.","'useEffect' is defined but never used.","'getFieldType' is defined but never used.","'setUpdated' is assigned a value but never used.","'fieldTypes' is assigned a value but never used.","'register' is assigned a value but never used.","'errors' is assigned a value but never used.","'prepend' is assigned a value but never used.","'swap' is assigned a value but never used.","'move' is assigned a value but never used.","'insert' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'append'. Either include it or remove the dependency array.","ArrayExpression",["123"],"'useState' is defined but never used.",["124"],"React Hook useEffect has missing dependencies: 'fieldValuePath', 'getValues', 'previousType', and 'setValue'. Either include them or remove the dependency array.",["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"126","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [append]",{"range":"131","text":"132"},{"range":"133","text":"132"},"Update the dependencies array to be: [fieldType, fieldValuePath, getValues, previousType, setValue]",{"range":"134","text":"135"},[706,708],"[append]",[4634,4636],[10229,10240],"[fieldType, fieldValuePath, getValues, previousType, setValue]"]